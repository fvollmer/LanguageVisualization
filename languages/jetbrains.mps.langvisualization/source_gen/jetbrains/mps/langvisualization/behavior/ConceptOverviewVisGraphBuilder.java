package jetbrains.mps.langvisualization.behavior;

/*Generated by MPS */

import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.mbeddr.mpsutil.plantuml.node.behavior.VisGraph;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.smodel.LanguageAspect;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ConceptOverviewVisGraphBuilder {
  public static final String CATEGORY = "module structure";
  private static final String EXTENDS = "<|--";
  private static final String IMPLEMENTS = "<|..";
  public static final String NS_SEP = ".";

  private Set<SNode> alreadyDeclared = SetSequence.fromSet(new HashSet<SNode>());

  private VisGraph graph;

  private boolean showImported;
  private boolean showInterfaces;
  private boolean excludeSubconcepts;
  private boolean includeSubconcepts;
  private Iterable<SNode> excludedConcepts;
  private Iterable<SNode> includedConcepts;
  private String packageMapping;


  public void buildGraph(VisGraph graph, SNode languageVisualization) {
    this.graph = graph;
    graph.setTitle(SPropertyOperations.getString(languageVisualization, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    this.showImported = SPropertyOperations.getBoolean(languageVisualization, MetaAdapterFactory.getProperty(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x5e94ed6ade77d7d9L, "showImported"));
    this.showInterfaces = SPropertyOperations.getBoolean(languageVisualization, MetaAdapterFactory.getProperty(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x6f1c4df1608cbfccL, "showInterfaces"));
    this.excludedConcepts = ListSequence.fromList(SLinkOperations.getChildren(languageVisualization, MetaAdapterFactory.getContainmentLink(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x1595da57f273b78eL, "excludedConcepts"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x167a879f38a23f9aL, 0x167a879f38a23f9bL, "concept")) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x167a879f38a23f9aL, 0x167a879f38a23f9bL, "concept"));
      }
    });
    this.includedConcepts = ListSequence.fromList(SLinkOperations.getChildren(languageVisualization, MetaAdapterFactory.getContainmentLink(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x6f1c4df1608d0e23L, "includedConcepts"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x167a879f38a23f9aL, 0x167a879f38a23f9bL, "concept")) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x167a879f38a23f9aL, 0x167a879f38a23f9bL, "concept"));
      }
    });
    this.includeSubconcepts = SPropertyOperations.getBoolean(languageVisualization, MetaAdapterFactory.getProperty(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x35563d32d3e84d5L, "includeSubconcepts"));
    this.excludeSubconcepts = SPropertyOperations.getBoolean(languageVisualization, MetaAdapterFactory.getProperty(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x35563d32d3e75f3L, "excludeSubconcepts"));
    this.packageMapping = SPropertyOperations.getString_def(languageVisualization, MetaAdapterFactory.getProperty(0x671fae57a26e4040L, 0xa1a3542a26fc8226L, 0x5e94ed6ade77d7d0L, 0x6f1c4df1609a6797L, "packageMapping"), "none");
    graph.add("set namespaceSeparator " + NS_SEP);
    graph.add("hide empty methods");

  }


  public void addConcept(final SNode concept) {
    if (needToBeAdded(concept) && !(SetSequence.fromSet(alreadyDeclared).contains(concept))) {
      String classOrIface = (SNodeOperations.isInstanceOf(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) ? "interface" : "class");
      SetSequence.fromSet(alreadyDeclared).addElement(concept);
      final String name = getFqModuleName(concept, true);
      String annotations = getAnnotation(concept);
      String annotationPart = ((annotations == null || annotations.length() == 0) ? "" : " <<" + annotations + ">> ");

      String isAbstract = (SPropertyOperations.getBoolean(concept, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec2L, "abstract")) ? "abstract " : "");
      graph.add(isAbstract + classOrIface + " " + name + annotationPart + " {");
      graph.add(graph.createUrl(concept));
      addMember(concept);
      graph.add("}");
      Sequence.fromIterable(getImplementsAndExtends(concept)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode ancestor) {
          if (needToBeReferenced(concept, ancestor)) {
            addConcept(ancestor);
            graph.add(getFqModuleName(ancestor, false) + " " + getInheritanceArrow(concept, ancestor) + " " + name);
          }
        }
      });
    }
  }

  private boolean needToBeAdded(SNode concept) {
    if (Sequence.fromIterable(includedConcepts).isNotEmpty()) {
      if (matchNotIncludedConcepts(concept)) {
        return false;
      }
    } else {
      if (matchExcludedConcepts(concept)) {
        return false;
      }
      if (SNodeOperations.isInstanceOf(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) && !(showInterfaces)) {
        return false;
      }
    }
    return true;
  }

  private boolean matchExcludedConcepts(final SNode concept) {
    if (excludeSubconcepts) {
      return Sequence.fromIterable(excludedConcepts).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return isSubconcept(concept, it);
        }
      });
    } else {
      return Sequence.fromIterable(excludedConcepts).contains(concept);
    }
  }

  private boolean isSubconcept(SNode subConcept, SNode superConcept) {
    // <node> 
    return SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(subConcept), SNodeOperations.asSConcept(superConcept));
  }

  private boolean matchNotIncludedConcepts(final SNode concept) {
    if (includeSubconcepts) {
      return !(Sequence.fromIterable(includedConcepts).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return isSubconcept(concept, it);
        }
      }));
    } else {
      return !(Sequence.fromIterable(includedConcepts).contains(concept));
    }
  }
  private boolean needToBeReferenced(SNode from, SNode to) {
    return (showImported || SModelOperations.getModuleStub(SNodeOperations.getModel(from)) == SModelOperations.getModuleStub(SNodeOperations.getModel(to))) && needToBeAdded(to);
  }

  private Iterable<SNode> getImplementsAndExtends(SNode concept) {
    List<SNode> ret = new ArrayList<SNode>();
    {
      final SNode c = concept;
      if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        if ((SLinkOperations.getTarget(c, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")) != null)) {
          ListSequence.fromList(ret).addElement(SLinkOperations.getTarget(c, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")));
        }
        ListSequence.fromList(ret).addSequence(ListSequence.fromList(SLinkOperations.getChildren(c, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"))).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc")) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc"));
          }
        }));
      }
    }
    {
      final SNode iface = concept;
      if (SNodeOperations.isInstanceOf(iface, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"))) {
        ListSequence.fromList(ret).addSequence(ListSequence.fromList(SLinkOperations.getChildren(iface, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, 0x110356e9df4L, "extends"))).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc")) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc"));
          }
        }));
      }
    }
    return ret;
  }

  private String getAnnotation(SNode concept) {
    StringBuffer sb = new StringBuffer();
    if (SPropertyOperations.getBoolean(concept, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec7L, "final"))) {
      addCommaSeperatedToBuffer(sb, "final");
    }
    if (SNodeOperations.isInstanceOf(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) && SPropertyOperations.getBoolean(SNodeOperations.cast(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xff49c1d648L, "rootable"))) {
      addCommaSeperatedToBuffer(sb, "root");
    }
    /*
      List<SNode> attr = AttributeOperations.getAttributeList(concept, new IAttributeDescriptor.AllAttributes());
      for (SNode a : ListSequence.fromList(attr)) {
        addCommaSeperatedToBuffer(sb, BehaviorReflection.invokeVirtual(String.class, a, "virtual_getPresentation_1213877396640", new Object[]{}));
      }
    */
    return sb.toString();
  }

  private static void addCommaSeperatedToBuffer(StringBuffer sb, String str) {
    String comma = (sb.length() > 0 ? "," : "");
    sb.append(comma + str);
  }

  private String getFqModuleName(SNode concept, boolean isDeclaration) {
    String pkg = getPackage(concept);
    return "\"" + pkg + ((isDeclaration ? BehaviorReflection.invokeVirtual(String.class, concept, "virtual_getPresentation_1213877396640", new Object[]{}) : SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) + "\"";
  }

  private String getPackage(SNode concept) {
    if (eq_31xmpy_a0a0ob(packageMapping, "lang")) {
      return SPropertyOperations.getString(SModelOperations.getModuleStub(SNodeOperations.getModel(concept)), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + NS_SEP;
    } else if (eq_31xmpy_a0a0a04(packageMapping, "vpack")) {
      return ((isNotEmptyString(SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage"))) ? SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage")) + NS_SEP : ""));
    } else {
      return "";
    }
  }

  private String getInheritanceArrow(SNode lower, SNode upper) {
    String arrow;
    if (SNodeOperations.isInstanceOf(upper, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) && SNodeOperations.isInstanceOf(lower, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"))) {
      arrow = IMPLEMENTS;
    } else {
      arrow = EXTENDS;
    }
    return arrow;
  }

  private void addMember(SNode concept) {
    ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6cL, "propertyDeclaration"))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        addProperty(it);
      }
    });
    ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6bL, "linkDeclaration"))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        addLink(it);
      }
    });
    SNode behavior = AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR);
    if ((behavior == null)) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Found no behavior for concept " + concept);
      }
    } else {
      if (LOG.isInfoEnabled()) {
        LOG.info("Found behavior " + behavior + " for concept " + concept);
      }
    }
    {
      final SNode b = behavior;
      if (SNodeOperations.isInstanceOf(b, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, "jetbrains.mps.lang.behavior.structure.ConceptBehavior"))) {
        ListSequence.fromList(SLinkOperations.getChildren(b, MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b25L, "method"))).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            addMethod(it);
          }
        });
      }
    }
  }

  private void addProperty(SNode prop) {
    graph.add("\t" + SLinkOperations.getTarget(prop, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, 0xfc26f42fe5L, "dataType")) + " " + SPropertyOperations.getString(prop, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " " + graph.createUrl(prop));
  }


  private void addLink(SNode link) {
    String italicStart = "";
    String italicEnd = "";
    if (eq_31xmpy_a0c0xb(SPropertyOperations.getString_def(link, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "reference"), "reference")) {
      italicStart = "<i>";
      italicEnd = "</i>";
    }
    graph.add("\t" + italicStart + SLinkOperations.getTarget(link, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98055fef0L, "target")) + "[" + SPropertyOperations.getString_def(link, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98054bb04L, "sourceCardinality"), "0..1") + "]" + " " + SPropertyOperations.getString(link, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98052f333L, "role")) + italicEnd + " " + graph.createUrl(link));
  }

  private void addMethod(SNode method) {
    String isAbstract = (SPropertyOperations.getBoolean(method, MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, 0x11d43480582L, "isAbstract")) ? "{abstract} " : "");
    String isStatic = (SPropertyOperations.getBoolean(method, MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, 0x51613f7fe129b24dL, "isStatic")) ? "{static} " : "");

    graph.add("\t" + visibility(SLinkOperations.getTarget(method, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, 0x112670d886aL, "visibility"))) + isAbstract + isStatic + SLinkOperations.getTarget(method, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")) + " " + SPropertyOperations.getString(method, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "(" + getParameterTypes(SLinkOperations.getChildren(method, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))) + ") " + graph.createUrl(method));
  }

  private String getParameterTypes(Iterable<SNode> parameters) {
    final StringBuffer sb = new StringBuffer();
    Sequence.fromIterable(parameters).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        addCommaSeperatedToBuffer(sb, BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), "virtual_getPresentation_1213877396640", new Object[]{}));
      }
    });
    return sb.toString();
  }

  private String visibility(SNode visibility) {
    {
      SNode concept_a0dc;
      {
        SNode node_a0dc = visibility;
        concept_a0dc = SNodeOperations.getConceptDeclaration(node_a0dc);
      }
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0dc), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9586f0cL, "jetbrains.mps.baseLanguage.structure.PrivateVisibility"))) {
        return "-";
      }
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0dc), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af958b686L, "jetbrains.mps.baseLanguage.structure.ProtectedVisibility"))) {
        return "#";
      }
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0dc), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9581ff1L, "jetbrains.mps.baseLanguage.structure.PublicVisibility"))) {
        return "+";
      }
    }
    return "~";
  }

  protected static Logger LOG = LogManager.getLogger(ConceptOverviewVisGraphBuilder.class);
  private static boolean eq_31xmpy_a0a0ob(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_31xmpy_a0a0a04(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
  private static boolean eq_31xmpy_a0c0xb(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
